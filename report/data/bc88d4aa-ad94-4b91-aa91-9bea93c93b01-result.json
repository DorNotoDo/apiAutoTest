{"name": "get请求查询用户数据列表", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'msg': 'page...'status': 400} == {'msg': '获取管理...'status': 200}\n  Differing items:\n  {'msg': 'pagenum 参数错误'} != {'msg': '获取管理员列表成功'}\n  {'status': 400} != {'status': 200}\n  Use -v to get the full diff", "trace": "self = <test.test_api.TestApiAuto object at 0x0000028C6C1052C8>\ncase_number = 'case_004', case_title = 'get请求查询用户数据列表', path = 'users'\nis_token = '', method = 'get', parametric_key = 'data', file_var = ''\nfile_path = '', data = {'msg': None, 'pagenum': 1, 'pagesize': '12'}\nexpect = {'msg': '获取管理员列表成功', 'status': 200}\n\n    @pytest.mark.parametrize('case_number,case_title,path,is_token,method,parametric_key,file_var,'\n                             'file_path,data,expect', data_list)\n    def test_main(self, case_number, case_title, path, is_token, method, parametric_key, file_var,\n                  file_path, data, expect):\n    \n        # 感谢：https://www.cnblogs.com/yoyoketang/p/13386145.html，提供动态添加标题的实例代码\n        # 动态添加标题\n        allure.dynamic.title(case_title)\n    \n        logger.debug(f'⬇️⬇️⬇️...执行用例编号:{case_number}...⬇️⬇️⬇️️')\n        with allure.step(\"处理相关数据依赖，header\"):\n    \n            header = DataProcess.header\n            allure.attach(json.dumps(header, ensure_ascii=False, indent=4), \"请求头\", allure.attachment_type.TEXT)\n            path = DataProcess.handle_path(path)\n    \n            data = DataProcess.handle_data(data)\n            allure.attach(json.dumps(data, ensure_ascii=False, indent=4), \"请求数据\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"发送请求，取得响应结果的json串\"):\n            allure.attach(json.dumps(base_url + path, ensure_ascii=False, indent=4), \"最终请求地址\", allure.attachment_type.TEXT)\n            res = br.send_requests(method=method, url=base_url + path, parametric_key=parametric_key, file_var=file_var, file_path=file_path,\n                                   data=data, header=header)\n            allure.attach(json.dumps(res, ensure_ascii=False, indent=4), \"实际响应\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"将响应结果的内容写入实际响应字典中\"):\n            DataProcess.save_response(case_number, res)\n            allure.attach(json.dumps(DataProcess.response_dict, ensure_ascii=False, indent=4), \"实际响应字典\", allure.attachment_type.TEXT)\n    \n            # 写token的接口必须是要正确无误能返回token的\n            if is_token == '写':\n                with allure.step(\"从登录后的响应中提取token到header中\"):\n                    DataProcess.handle_header(is_token, res, token_reg)\n    \n        with allure.step(\"根据配置文件的提取响应规则提取实际数据\"):\n            really = jsonpath.jsonpath(res, res_reg)[0]\n            allure.attach(json.dumps(really, ensure_ascii=False, indent=4), \"提取用于断言的实际响应部分数据\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"处理读取出来的预期结果响应\"):\n            # 处理预期结果数据中使用True/False/None导致的无法转换bug\n            if 'None' in expect:\n                expect = expect.replace('None', 'null')\n            if 'True' in expect:\n                expect = expect.replace('True', 'true')\n            if 'False' in expect:\n                expect = expect.replace('False', 'false')\n            expect = json.loads(expect)\n            allure.attach(json.dumps(expect, ensure_ascii=False, indent=4), \"预期响应\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"预期结果与实际响应进行断言操作\"):\n            logger.info(f'完整的json响应: {res}\\n需要校验的数据字典: {really} 预期校验的数据字典: {expect} \\n测试结果: {really == expect}')\n            logger.debug(f'⬆⬆⬆...用例编号:{case_number},执行完毕,日志查看...⬆⬆⬆\\n\\n️')\n            allure.attach(json.dumps(really == expect, ensure_ascii=False, indent=4), \"测试结果\", allure.attachment_type.TEXT)\n>           assert really == expect\nE           AssertionError: assert {'msg': 'page...'status': 400} == {'msg': '获取管理...'status': 200}\nE             Differing items:\nE             {'msg': 'pagenum 参数错误'} != {'msg': '获取管理员列表成功'}\nE             {'status': 400} != {'status': 200}\nE             Use -v to get the full diff\n\ntest_api.py:105: AssertionError"}, "steps": [{"name": "处理相关数据依赖，header", "status": "passed", "attachments": [{"name": "请求头", "source": "47e78c00-def9-472e-8fc0-d7fdb136f75c-attachment.txt", "type": "text/plain"}, {"name": "请求数据", "source": "c2f22a47-8b3a-4d7a-9c98-7573de82fb43-attachment.txt", "type": "text/plain"}], "start": 1605717898481, "stop": 1605717898481}, {"name": "发送请求，取得响应结果的json串", "status": "passed", "attachments": [{"name": "最终请求地址", "source": "7cfae026-92ea-42cb-9f6e-7d0c3088dcbe-attachment.txt", "type": "text/plain"}, {"name": "实际响应", "source": "b61539a4-3fbe-4a37-9205-52347623cf2e-attachment.txt", "type": "text/plain"}], "start": 1605717898481, "stop": 1605717898528}, {"name": "将响应结果的内容写入实际响应字典中", "status": "passed", "attachments": [{"name": "实际响应字典", "source": "48be1a1c-491e-4239-a280-fa1130aa34d8-attachment.txt", "type": "text/plain"}], "start": 1605717898528, "stop": 1605717898528}, {"name": "根据配置文件的提取响应规则提取实际数据", "status": "passed", "attachments": [{"name": "提取用于断言的实际响应部分数据", "source": "3167f2bb-bd55-46ca-840f-2adc0fb606cc-attachment.txt", "type": "text/plain"}], "start": 1605717898528, "stop": 1605717898528}, {"name": "处理读取出来的预期结果响应", "status": "passed", "attachments": [{"name": "预期响应", "source": "d577c1f8-abe6-4b70-83d2-55fe5509595d-attachment.txt", "type": "text/plain"}], "start": 1605717898528, "stop": 1605717898528}, {"name": "预期结果与实际响应进行断言操作", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'msg': 'page...'status': 400} == {'msg': '获取管理...'status': 200}\n  Differing items:\n  {'msg': 'pagenum 参数错误'} != {'msg': '获取管理员列表成功'}\n  {'status': 400} != {'status': 200}\n  Use -v to get the full diff\n", "trace": "  File \"C:\\Users\\zy7y\\Desktop\\apiAutoTest\\test\\test_api.py\", line 105, in test_main\n    assert really == expect\n"}, "attachments": [{"name": "测试结果", "source": "18e0bbc9-10ee-45f5-8590-dc63e9f168a7-attachment.txt", "type": "text/plain"}], "start": 1605717898528, "stop": 1605717898528}], "attachments": [{"name": "stdout", "source": "a8be8f6b-d6f2-41a0-914c-aff994705585-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "331c85d1-3823-4ff1-9b4d-ea6f2aae32b0-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_number", "value": "'case_004'"}, {"name": "case_title", "value": "'get请求查询用户数据列表'"}, {"name": "path", "value": "'users'"}, {"name": "is_token", "value": "''"}, {"name": "method", "value": "'get'"}, {"name": "parametric_key", "value": "'data'"}, {"name": "file_var", "value": "''"}, {"name": "file_path", "value": "''"}, {"name": "data", "value": "'{\"pagenum\": 1, \"pagesize\": \"12\", \"msg\": &$.msg&}'"}, {"name": "expect", "value": "'{\"msg\": \"获取管理员列表成功\", \"status\": 200}'"}], "start": 1605717898481, "stop": 1605717898528, "uuid": "fbabb28d-2171-48c0-af85-adfd0d0e623a", "historyId": "10e5fa496a1b715b9dddddab39e72c9b", "testCaseId": "c2b13641bbced8035cf0282bfb1839e4", "fullName": "test.test_api.TestApiAuto#test_main", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiAuto"}, {"name": "host", "value": "DESKTOP-0T59F1A"}, {"name": "thread", "value": "11680-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}